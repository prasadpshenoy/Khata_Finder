import requests as r
from bs4 import BeautifulSoup
import re
import json

headers = {'Content-Type': 'application/x-www-form-urlencoded'}
url = "https://landrecords.karnataka.gov.in/Service64/"
data = {
"ScriptManager1": "UpdatePanel4|btnGetReport",
"a": "rbnKhataNum",
"drpdist": 20,
"drptaluk": 5,
"drphobli": 2,
"ddlVillage": 36,
"txtSurvey": 0,
"__EVENTTARGET": None,
"__EVENTARGUMENT": None,
"__LASTFOCUS": None,
"__VIEWSTATE": "",
"__VIEWSTATEGENERATOR": "DC57A938",
"__EVENTVALIDATION": "P6CelRvRYs93NNscVrxsRkF0/gK7C9C0ZmhP/FH9nAt6wRhuVYSoY2/iq0PNLbGSqa5yAPuqD3UrdRUlDpQCrLBmKBYR/QipIm0qmJcBiPqtUwyobgw/JZv5cpyS2luMMu9HiAaVGXFeBcqUR4YCPiwA2SELsSY9Q5UvkqofzF98HdemDgkKtzD1aJdDv4ZVktyIaFKVgG0l7vceuJsSudUFMMwcTSa+Ny9yZFGiHbGXyiEj/pTwHSXe8jtxR+JaM+ZWH2Z1V6srRqRk90CaJF0bvP9knwUyL/7aTkKNQiw35geN9pKS3YWA/QAEyAdZ7oXX6KBkX5cW6IwfdO5GnOG4kVjci4aAwjbdRyPvgaKsJPeUMO5t9pUaqrVzFsDTJojCNRP4DS99we9yuKLxAj1eae64nuxEl4yod9RP2iHSzM4H4r2WFeF4nPxfv6mXbmMNqXRbaDAr312IVddJqyVAEcDmG6O1z+j0v2j4j9Vuhuwg7G+3R6Y1FIISTvJP28Gl0DbBaXOnzsclfOWHEhWIcxYSDZnRGE0fGKWAK8UYUIMcbLUzLpVWRAvPE8tCz25W8X7Mi79ZMrU+NfYWmq/eo7215mT8C8bmZUp9/m5zNf/r4QdHz8JDqQvdTfYbX3pvE59C4CHVpuH5XT/Khl7qc4cVzMpL3Hb6RZh+a7061DlJkKF8MR9OXwp8eOTt6N6k0GAQPAwErFH+UKk0CA1m3PkP46u6fG6f3W6pKZE41X0hitQGYCzYacveBnS7yh8gsUJ38Eq+XGCxzyiqd/V3T5qQ47fQuVuPEaO+uAisfm6NRt62ebrSWCEaTXQaURYDFz+a1aMSuWdKSPEnKump/N48q8GjuJGZa7bRe9Y92STEfvgPPViLdxATvFwsBDcdvjECazYsXsydteU/MHUem3Zh2Ny8CYShqwb0yRwXlH1EotJpCeldAcLHxp7tL+ZzUzd8QDGnrOP9NQpudpncg+GMuNhkfwtzpbsa9AEqawlL6pzKAueKe0y0JjnJOdSmcrdGqSD+SmuZUtmY9tZVbI1m9+6PalLkPXNq51SfX7HoQCT4MDDKC5ZGJvJWRE5GvKUnvb4TMygPiEUguE9cfSnUXD21gwxG0adQNYSieK2GcoTU7QisU5YfWC/IucXs84RlfKV2ckGs9srS+BQRPBSrE02u9BOK8CwRQz8I2oAO1j+GzFh7okzcS2OTe3GDLsKR9sgUS3WKLv+3G2xAGn3FyR6mdc0XP2MZXw7QuHfv0Fi7avIsliWnz+BW8bU2MN5NdKG9Umtb6ZoOVsxGI8fidNDiYromVJgD8C527z5URUp20hpCbpiUg7jEcrI5j2nTCBg8pBYNSR21654kPre4rBvFiBvy3U90p2p/YHiQzBLijRBKliPzLR2WHAUwseQ2umCY+TXcimMl4S0dvIKE4CeLynOihqOo0XhvmB6FOtGps+oEdbjHlJjMHkHAfcOBN/ZRDqr9atRBOBBP+lfEOmhjnfTok4KZSbBGTfgjnb2DFZ1EmBcR0Nz8BjJs6WGAZb7jQ4pQLC2W1ElX2bPkQSw+XHUtyhqsveoB/FepHo346hlEE77IqYzKwLDven4SZjzGzE7pxY7/Yg==",
"__ASYNCPOST": True,
"btnGetReport": "Get Report"
}

expected_survey_nos = ['3/*/7','3/*/8A','3/*/8B','3/*/8C','3/*/10'] #30

khata_details  = {}

def is_khata_present(khata_no, response, expected_survey_nos):
    soup = BeautifulSoup(response.content, 'html.parser')
    s = soup.find('table', id='grdKhata')
    # survey = s.find('span', id='grdKhata_lblSurveyNo_0')
    try:
        span_tags_survey_no = s.find_all('span', id=re.compile('^grdKhata_lblSurveyNo_'))
    except AttributeError:
        print (f'Details not present for this Khatha number {khata_no}')
        return False
    actual_survey_nos = []

    for span_tag in span_tags_survey_no:
        actual_survey_nos.append(span_tag.text.strip())
        #print(span_tag.text.strip())
    print(f'Actual surveys of Khata {khata_no} is {actual_survey_nos}')
    matching_survey_nos = [elem for elem in actual_survey_nos if elem in expected_survey_nos]
    print (f'Surveys of Khata {khata_no} present in expected surveys {matching_survey_nos}')

    if (matching_survey_nos.__len__() > 0):
        khata_details[khata_no] = actual_survey_nos
        return True

    return False

all_khata_nos = []
for khata_no in range(1,500):
    print(f'Requesting Khata {khata_no}')
    data['txtSurvey'] = khata_no
    response = r.request(method="POST", headers=headers, url=url, data=data)
    #print (response.content)
    if (is_khata_present(khata_no, response, expected_survey_nos)):
        all_khata_nos.append(khata_no)

print(f'All Khata numbers having expected survey numbers {all_khata_nos}')
print(f'Khata details {json.dumps(khata_details)}')

